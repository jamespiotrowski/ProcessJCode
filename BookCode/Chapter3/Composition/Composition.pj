import std.*;

/**** Not in book - used for tesing ****/
public void writer(chan<int>.write out){
    /**** For FIFO6 ****/
    for(int i = 0; i < 100; i++){
        println("Writing: " + i);
        out.write(i);
    }
}

/**************************************************
    START BOOK CODE 
**************************************************/
public void id(chan<int>.read in, chan<int>.write out){
    while(true){
        int x;
        x = in.read();
        println("id: " + x); // For testing
        out.write(x);
    }
}

public void succ(chan<int>.read in, chan<int>.write out){
    while(true){
        int x;
        x = in.read();
        out.write(x + 1);
    }
}

public void blackHole(chan<int>.read in){
    while(true){
        int x;
        x = in.read();
        println("Black Hole: " + x); // For testing
    }
}

public void plus(chan<int>.read in1, chan<int>.read in2, chan<int>.write out){
    while(true){
        int x1, x2;
        par{
            x1 = in1.read();
            x2 = in2.read();
        }
        out.write(x1 + x2);
    }
}

public void delta(chan<int>.read in, chan<int>.write out1, chan<int>.write out2){
    while(true){
        int x;
        x = in.read();
        par{
            out1.write(x);
            out2.write(x);
        }
    }
}

public void prefix(const int n, chan<int>.read in, chan<int>.write out){
    out.write(n);
    id(in,out);
}

public void tail(chan<int>.read in, chan<int>.write out){
    int x;
    x = in.read();
    id(in,out);
}

public void FIFO6(chan<int>.read in, chan<int>.write out){
    chan<int> c1,c2,c3,c4,c5;
    par{
        id(in, c1.write);
        id(c1.read, c2.write);
        id(c2.read, c3.write);
        id(c3.read, c4.write);
        id(c4.read, c5.write);
        id(c5.read, out);
    }
}

public void numbers(chan<int>.write out){
    chan<int> a, b, c;
    par{
        delta(a.read, out, b.write);
        succ(b.read, c.write);
        prefix(0, c.read, a.write);
    }
}

public void integrate(chan<int>.read in, chan<int>.write out){
    chan<int> a, b, c;
    par{
        delta(a.read, out, b.write);
        prefix(0, b.read, c.write);
        plus(in, c.read, a.write);
    }
}

public void pairs(chan<int>.read in, chan<int>.write out){
    chan<int> a, b, c;
    par{
        delta(in, a.write, c.write);
        tail(a.read, b.write);
        plus(b.read, c.read, out);
    }
}

public void fibonacci(chan<int>.write out){
    chan<int> a, b, c, d;
    par{
        delta(a.read, b.write, out);
        pairs(b.read, c.write);
        prefix(0, d.read, a.write);
        prefix(1, c.read, d.write);
    }
}

public void squares(chan<int>.write out){
    chan<int> a, b;
    par{
        numbers(a.write);
        integrate(a.read, b.write);
        pairs(b.read, out);
    }
}

public void main(string[] args){
    int TEST_FIFO6 = 0;
    int TEST_NUMBERS = 1;
    int TEST_INTEGRATE = 2;
    int TEST_PAIRS = 3;
    int TEST_FIBONACCI = 4;
    int TEST_SQUARES = 5;

    int test = 
        //TEST_FIFO6;
        //TEST_NUMBERS;
        //TEST_INTEGRATE;
        //TEST_PAIRS;
        //TEST_FIBONACCI;
        TEST_SQUARES;

    switch(test){
        /**** TESTING FIFO6 ****/
        case(0) : { 
            chan<int> in, out;
            par{
                FIFO6(in.read, out.write);
                writer(in.write);
                blackHole(out.read);
            }
            break;
        }

        /**** TESTING NUMBERS ****/
        case(1) : { 
            chan<int> out;
            par{
                numbers(out.write);
                blackHole(out.read);
            }
            break;
        }

        /**** TESTING INTEGRATE ****/
        case(2) : { 
            chan<int> in, out;
            par{
                writer(in.write);
                integrate(in.read, out.write);
                blackHole(out.read);
            }
            break;
        }

        /**** TESTING PAIRS ****/
        case(3) : { 
            chan<int> in, out;
            par{
                writer(in.write);
                pairs(in.read, out.write);
                blackHole(out.read);
            }
            break;
        }

        /**** TESTING FIBONACCI ****/
        case(4) : { 
            chan<int> out;
            par{
                fibonacci(out.write);
                blackHole(out.read);
            }
            break;
        }

        /**** TESTING SQUARES ****/
        case(5) : { 
            chan<int> out;
            par{
                squares(out.write);
                blackHole(out.read);
            }
            break;
        }

        default : {
            break;
        }
    }
}
